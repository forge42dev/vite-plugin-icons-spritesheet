/*eslint-disable no-console */
import { promises as fs } from "node:fs";
import path from "node:path";
import { glob } from "glob";
import { parse } from "node-html-parser";
import chalk from "chalk";
import type { Plugin } from "vite";
import { normalizePath } from "vite";
import { mkdir } from "node:fs/promises";
import { optimize, type Config as SvgoConfig } from "svgo";

interface PluginProps {
  withTypes?: boolean;
  inputDir: string;
  outputDir: string;
  typesOutputFile?: string;
  fileName?: string;
  cwd?: string;
  iconNameTransformer?: (fileName: string) => string;
  svgo?: {
    enabled?: boolean;
    options?: SvgoConfig;
  };
}

const generateIcons = async ({
  withTypes = false,
  inputDir,
  outputDir,
  typesOutputFile = `${outputDir}/types.ts`,
  cwd,
  fileName = "sprite.svg",
  iconNameTransformer,
  svgo,
}: PluginProps) => {
  const cwdToUse = cwd ?? process.cwd();
  const inputDirRelative = path.relative(cwdToUse, inputDir);
  const outputDirRelative = path.relative(cwdToUse, outputDir);

  const files = glob.sync("**/*.svg", {
    cwd: inputDir,
  });
  if (files.length === 0) {
    console.log(`‚ö†Ô∏è  No SVG files found in ${chalk.red(inputDirRelative)}`);
    return;
  }

  await mkdir(outputDirRelative, { recursive: true });
  await generateSvgSprite({
    files,
    inputDir,
    outputPath: path.join(outputDir, fileName),
    outputDirRelative,
    iconNameTransformer,
    svgo,
  });

  if (withTypes) {
    const typesOutputDir = path.dirname(typesOutputFile);
    const typesFile = path.basename(typesOutputFile);
    const typesOutputDirRelative = path.relative(cwdToUse, typesOutputDir);

    await mkdir(typesOutputDirRelative, { recursive: true });
    await generateTypes({
      names: files.map((file: string) => transformIconName(file, iconNameTransformer ?? fileNameToCamelCase)),
      outputPath: path.join(typesOutputDir, typesFile),
    });
  }
};

const transformIconName = (fileName: string, transformer: (iconName: string) => string) => {
  const iconName = fileName.replace(/\.svg$/, "");
  return transformer(iconName);
};

function fileNameToCamelCase(fileName: string): string {
  const words = fileName.split("-");
  const capitalizedWords = words.map((word) => word.charAt(0).toUpperCase() + word.slice(1));
  return capitalizedWords.join("");
}
/**
 * Creates a single SVG file that contains all the icons
 */
async function generateSvgSprite({
  files,
  inputDir,
  outputPath,
  outputDirRelative,
  iconNameTransformer,
  svgo,
}: {
  files: string[];
  inputDir: string;
  outputPath: string;
  outputDirRelative?: string;
  iconNameTransformer?: (fileName: string) => string;
  svgo?: {
    enabled?: boolean;
    options?: SvgoConfig;
  };
}) {
  // Each SVG becomes a symbol and we wrap them all in a single SVG
  const symbols = await Promise.all(
    files.map(async (file) => {
      const fileName = transformIconName(file, iconNameTransformer ?? fileNameToCamelCase);
      let input = await fs.readFile(path.join(inputDir, file), "utf8");
      if (svgo?.enabled ?? true) {
        input = await optimizeSvg(input, {
          ...svgo?.options,
        });
      }

      const root = parse(input);
      const svg = root.querySelector("svg");
      if (!svg) {
        console.log(`‚ö†Ô∏è No SVG tag found in ${file}`);
        return;
      }
      svg.tagName = "symbol";
      svg.setAttribute("id", fileName);
      svg.removeAttribute("xmlns");
      svg.removeAttribute("xmlns:xlink");
      svg.removeAttribute("version");
      svg.removeAttribute("width");
      svg.removeAttribute("height");
      return svg.toString().trim();
    })
  );
  const output = [
    '<?xml version="1.0" encoding="UTF-8"?>',
    '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">',
    "<defs>", // for semantics: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs
    ...symbols.filter(Boolean),
    "</defs>",
    "</svg>",
  ].join("\n");

  return writeIfChanged(outputPath, output, `üñºÔ∏è  Generated SVG spritesheet in ${chalk.green(outputDirRelative)}`);
}

async function optimizeSvg(svg: string, svgoOptions?: SvgoConfig) {
  return optimize(svg, svgoOptions).data;
}

async function generateTypes({ names, outputPath }: { names: string[]; outputPath: string }) {
  const output = [
    "// This file is generated by icon spritesheet generator",
    "",

    "export const iconNames = [",
    ...names.map((name) => `  "${name}",`),
    "] as const",
    "",
    "export type IconName = typeof iconNames[number]",
    "",
  ].join("\n");

  const file = await writeIfChanged(
    outputPath,
    output,
    `${chalk.blueBright("TS")} Generated icon types in ${chalk.green(outputPath)}`
  );
  return file;
}

/**
 * Each write can trigger dev server reloads
 * so only write if the content has changed
 */
async function writeIfChanged(filepath: string, newContent: string, message: string) {
  try {
    const currentContent = await fs.readFile(filepath, "utf8");
    if (currentContent !== newContent) {
      await fs.writeFile(filepath, newContent, "utf8");
      console.log(message);
    }
  } catch (e) {
    // File doesn't exist yet
    await fs.writeFile(filepath, newContent, "utf8");
    console.log(message);
  }
}

// biome-ignore lint/suspicious/noExplicitAny: <explanation>
export const iconsSpritesheet: (args: PluginProps) => any = ({
  withTypes,
  inputDir,
  outputDir,
  typesOutputFile,
  fileName,
  cwd,
  iconNameTransformer,
  svgo,
}) => {
  const iconGenerator = async () =>
    generateIcons({
      withTypes,
      inputDir,
      outputDir,
      typesOutputFile,
      fileName,
      iconNameTransformer,
      svgo,
    });
  return {
    name: "icon-spritesheet-generator",
    async buildStart() {
      await iconGenerator();
    },
    async watchChange(file, type) {
      const inputPath = normalizePath(path.join(cwd ?? process.cwd(), inputDir));
      if (file.includes(inputPath) && file.endsWith(".svg") && ["create", "delete"].includes(type.event)) {
        await iconGenerator();
      }
    },
    async handleHotUpdate({ file }) {
      const inputPath = normalizePath(path.join(cwd ?? process.cwd(), inputDir));
      if (file.includes(inputPath) && file.endsWith(".svg")) {
        await iconGenerator();
      }
    },
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
  } satisfies Plugin<any>;
};
